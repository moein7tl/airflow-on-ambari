<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration supports_final="true">
  <property>
    <name>airflow_home</name>
    <value>/usr/local/airflow</value>
    <display-name>Airflow home</display-name>
    <description>The home folder for airflow, default is airflow_install_dir/airflow.</description>
  </property>
  <property>
    <name>dags_folder</name>
    <value>/usr/local/airflow/dags</value>
    <display-name>Dags folder</display-name>
    <description>The folder where your airflow pipelines live, most likely a subfolder in a code repository.</description>
  </property>
  <property>
    <name>base_log_folder</name>
    <value>/var/log/airflow</value>
    <display-name>Base log folder</display-name>
    <description>The folder where airflow should store its log files.</description>
  </property>
  <property>
    <name>remote_logging</name>
    <value>False</value>
    <display-name>Remote logging</display-name>
    <description>If remote_logging is set to true, see UPDATING.md for additional configuration requirements.</description>
  </property>
  <property>
    <name>remote_log_conn_id</name>
    <value></value>
    <display-name>Remote log connection id</display-name>
    <description>Airflow can store logs remotely in AWS S3 or Google Cloud Storage. Users must supply an Airflow connection id that provides access to the storage location.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>remote_base_log_folder</name>
    <value></value>
    <display-name>Remote base log folder</display-name>
    <description>Airflow can store logs remotely in AWS S3 or Google Cloud Storage. Users must supply an Airflow connection id that provides access to the storage location.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>encrypt_s3_logs</name>
    <value>False</value>
    <display-name>Encrypt S3 logs</display-name>
    <description>Encrypt S3 logs.</description>
  </property>
  <property>
    <name>logging_level</name>
    <value>INFO</value>
    <display-name>Logging level</display-name>
    <description>Logging level.</description>
  </property>
  <property>
    <name>fab_logging_level</name>
    <value>WARN</value>
    <display-name>Fab logging level</display-name>
    <description>Fab logging level.</description>
  </property>
  <property>
    <name>logging_config_class</name>
    <value></value>
    <display-name>Logging class</display-name>
    <description>Specify the class that will specify the logging configuration. This class has to be on the python classpath. logging_config_class = my.path.default_local_settings.LOGGING_CONFIG</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>colored_console_log</name>
    <value>True</value>
    <display-name>Colored Console Log</display-name>
    <description>Flag to enable/disable Colored logs in Console Colour the logs when the controlling terminal is a TTY.</description>
  </property>
  <property>
    <name>colored_log_format</name>
    <value>[%%(blue)s%%(asctime)s%%(reset)s] {%%(blue)s%%(filename)s:%%(reset)s%%(lineno)d} %%(log_color)s%%(levelname)s%%(reset)s - %%(log_color)s%%(message)s%%(reset)s</value>
    <display-name>Colored Log Format</display-name>
    <description>Log format for when Colored logs is enabled</description>
  </property>
  <property>
    <name>log_format</name>
    <value>[%%(asctime)s] {%%(filename)s:%%(lineno)d} %%(levelname)s - %%(message)s</value>
    <display-name>Log format</display-name>
    <description>Log format.</description>
  </property>
  <property>
    <name>simple_log_format</name>
    <value>%%(asctime)s %%(levelname)s - %%(message)s</value>
    <display-name>Simple log format</display-name>
    <description>Simple log format.</description>
  </property>
  <!-- Log filename format -->
  <property>
    <name>log_filename_template</name>
    <value>{{ ti.dag_id }}/{{ ti.task_id }}/{{ ts }}/{{ try_number }}.log</value>
    <display-name>Log filename format</display-name>
    <description>We need to escape the curly braces by adding an additional curly brace.</description>
  </property>
  <property>
    <name>log_processor_filename_template</name>
    <value>{{ filename }}.log</value>
    <display-name>Log processor filename template</display-name>
    <description>We need to escape the curly braces by adding an additional curly brace.</description>
  </property>
  <property>
    <name>dag_processor_manager_log_location</name>
    <value>/var/log/airflow/dag_processor_manager/dag_processor_manager.log</value>
    <display-name>Dag processor manager log location</display-name>
    <description>We need to escape the curly braces by adding an additional curly brace.</description>
  </property>
  <property>
    <name>task_log_reader</name>
    <value>task</value>
    <display-name>Task Log Reader</display-name>
    <description>Name of handler to read task instance logs. Default to use task handler.</description>
  </property>
  <property>
    <name>hostname_callable</name>
    <value>socket:getfqdn</value>
    <display-name>Hostname callable</display-name>
    <description>Hostname by providing a path to a callable, which will resolve the hostname.</description>
  </property>
  <property>
    <name>default_timezone</name>
    <value>utc</value>
    <display-name>Default timezone</display-name>
    <description>Default timezone in case supplied date times are naive. Can be utc (default), system, or any IANA timezone string (e.g. Europe/Amsterdam).</description>
  </property>
  <property>
    <name>executor</name>
    <value>SequentialExecutor</value>
    <display-name>Executor</display-name>
    <description>The executor class that airflow should use. Choices include SequentialExecutor, LocalExecutor, CeleryExecutor, DaskExecutor.</description>
  </property>
  <property>
    <name>sql_alchemy_conn</name>
    <value>sqlite:////usr/local/airflow/airflow.db</value>
    <display-name>SQL alchemy connection</display-name>
    <description>The SqlAlchemy connection string to the metadata database. SqlAlchemy supports many different database engine, more information their website.</description>
  </property>
  <property>
    <name>sql_engine_encoding</name>
    <value>utf-8</value>
    <display-name>SQL engine encoding</display-name>
    <description>The encoding for the databases</description>
  </property>
  <property>
    <name>sql_alchemy_pool_enabled</name>
    <value>True</value>
    <display-name>SQL alchemy pool enabled</display-name>
    <description>If SqlAlchemy should pool database connections.</description>
  </property>
  <property>
    <name>sql_alchemy_pool_size</name>
    <value>5</value>
    <display-name>SQL alchemy pool size</display-name>
    <description>The SqlAlchemy pool size is the maximum number of database connections in the pool.</description>
  </property>
  <property>
    <name>sql_alchemy_max_overflow</name>
    <value>10</value>
    <display-name>Sql alchemy max overflow</display-name>
    <description>The maximum overflow size of the pool. When the number of checked-out connections reaches the size set in pool_size, additional connections will be returned up to this limit. When those additional connections are returned to the pool, they are disconnected and discarded. It follows then that the total number of simultaneous connections the pool will allow is pool_size + max_overflow, and the total number of "sleeping" connections the pool will allow is pool_size. max_overflow can be set to -1 to indicate no overflow limit; no limit will be placed on the total number of concurrent connections. Defaults to 10.</description>
  </property>
  <property>
    <name>sql_alchemy_pool_recycle</name>
    <value>1800</value>
    <display-name>SQL alchemy pool recycle</display-name>
    <description>The SqlAlchemy pool recycle is the number of seconds a connection can be idle in the pool before it is invalidated. This config does not apply to sqlite.</description>
  </property>
  <property>
    <name>sql_alchemy_pool_pre_ping</name>
    <value>True</value>
    <display-name>SQL alchemy pool pre ping</display-name>
    <description>Check connection at the start of each connection pool checkout. Typically, this is a simple statement like "SELECT 1". More information here: https://docs.sqlalchemy.org/en/13/core/pooling.html#disconnect-handling-pessimistic</description>
  </property>
  <property>
    <name>parallelism</name>
    <value>32</value>
    <display-name>Parallelism</display-name>
    <description>The amount of parallelism as a setting to the executor. This defines the max number of task instances that should run simultaneously on this airflow installation.</description>
  </property>
  <property>
    <name>dag_concurrency</name>
    <value>16</value>
    <display-name>Dag concurrency</display-name>
    <description>The number of task instances allowed to run concurrently by the scheduler.</description>
  </property>
  <property>
    <name>dags_are_paused_at_creation</name>
    <value>True</value>
    <display-name>Dags are paused at creation</display-name>
    <description>Are DAGs paused by default at creation.</description>
  </property>
  <property>
    <name>non_pooled_task_slot_count</name>
    <value>128</value>
    <display-name>Non pooled task slot count</display-name>
    <description>When not using pools, tasks are run in the "default pool", whose size is guided by this config element.</description>
  </property>
  <property>
    <name>max_active_runs_per_dag</name>
    <value>16</value>
    <display-name>Max active runs per dag</display-name>
    <description>The maximum number of active DAG runs per DAG.</description>
  </property>
  <property>
    <name>load_examples</name>
    <value>False</value>
    <display-name>Load examples</display-name>
    <description>Whether to load the examples that ship with Airflow. It's good to get started, but you probably want to set this to False in a production environment.</description>
  </property>
  <property>
    <name>plugins_folder</name>
    <value>/usr/local/airflow/plugins</value>
    <display-name>Plugins folder</display-name>
    <description>Where your Airflow plugins are stored.</description>
  </property>
  <property>
    <name>fernet_key</name>
    <value>XKQ7xqzqAgM9doLL3PLsM8MYO6RWItA4HADnKviyLwY=</value>
    <display-name>Fernet key</display-name>
    <description>Secret key to save connection passwords in the db.</description>
  </property>
  <property>
    <name>donot_pickle</name>
    <value>False</value>
    <display-name>Do not pickle</display-name>
    <description>Whether to disable pickling dags.</description>
  </property>
  <property>
    <name>dagbag_import_timeout</name>
    <value>30</value>
    <display-name>DagBag import timeout</display-name>
    <description>How long before timing out a python file import while filling the DagBag.</description>
  </property>
  <property>
    <name>task_runner</name>
    <value>StandardTaskRunner</value>
    <display-name>Task runner</display-name>
    <description>The class to use for running task instances in a subprocess.</description>
  </property>
  <property>
    <name>default_impersonation</name>
    <value></value>
    <display-name>Default impersonation</display-name>
    <description>If set, tasks without a `run_as_user` argument will be run with this user. Can be used to de-elevate a sudo user running Airflow when executing tasks.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>security</name>
    <value></value>
    <display-name>Security</display-name>
    <description>What security module to use (for example kerberos).</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>secure_mode</name>
    <value>False</value>
    <display-name>Secure mode</display-name>
    <description>If set to False enables some unsecure features like Charts and Ad Hoc Queries. In 2.0 will default to True.</description>
  </property>
  <property>
    <name>unit_test_mode</name>
    <value>False</value>
    <display-name>Unit test mode</display-name>
    <description>Turn unit test mode on (overwrites many configuration options with test values at runtime).</description>
  </property>
  <property>
    <name>enable_xcom_pickling</name>
    <value>True</value>
    <display-name>Enable xcom pickling</display-name>
    <description>Whether to enable pickling for xcom (note that this is insecure and allows for RCE exploits). This will be deprecated in Airflow 2.0 (be forced to False).</description>
  </property>
  <property>
    <name>killed_task_cleanup_time</name>
    <value>60</value>
    <display-name>Killed task cleanup time</display-name>
    <description>When a task is killed forcefully, this is the amount of time in seconds that it has to cleanup after it is sent a SIGTERM, before it is SIGKILLED.</description>
  </property>
  <property>
    <name>dag_run_conf_overrides_params</name>
    <value>False</value>
    <display-name>DAG run conf overrides params</display-name>
    <description>Whether to override params with dag_run.conf. If you pass some key-value pairs through `airflow backfill -c` or `airflow trigger_dag -c`, the key-value pairs will override the existing ones in params.</description>
  </property>
  <property>
    <name>worker_precheck</name>
    <value>True</value>
    <display-name>Worker Precheck</display-name>
    <description>Worker initialisation check to validate Metadata Database connection.</description>
  </property>
  <property>
    <name>dag_discovery_safe_mode</name>
    <value>True</value>
    <display-name>Dag discovery safe mode</display-name>
    <description>When discovering DAGs, ignore any files that don't contain the strings ``DAG`` and ``airflow``.</description>
  </property>
  <property>
    <name>default_task_retries</name>
    <value>0</value>
    <display-name>Default task retries</display-name>
    <description>The number of retries each task is going to have by default. Can be overridden at dag or task level.</description>
  </property>
  <property>
    <name>store_serialized_dags</name>
    <value>False</value>
    <display-name>Store serialized dags</display-name>
    <description>Whether to serialises DAGs and persist them in DB. If set to True, Webserver reads from DB instead of parsing DAG files More details: https://airflow.apache.org/docs/stable/dag-serialization.html</description>
  </property>
  <property>
    <name>min_serialized_dag_update_interval</name>
    <value>30</value>
    <display-name>Min serialized dag update interval</display-name>
    <description>Updating serialized DAG can not be faster than a minimum interval to reduce database write rate.</description>
  </property>
  <property>
    <name>check_slas</name>
    <value>True</value>
    <display-name>Check slas</display-name>
    <description>On each dagrun check against defined SLAs</description>
  </property>
</configuration>
