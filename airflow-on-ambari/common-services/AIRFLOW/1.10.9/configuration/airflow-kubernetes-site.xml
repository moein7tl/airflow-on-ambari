<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration supports_final="true">
  <property>
    <name>worker_container_repository</name>
    <value></value>
    <display-name>Worker container repository</display-name>
    <description>The repository and tag of the Kubernetes Image for the Worker to Run.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>worker_container_tag</name>
    <value></value>
    <display-name>Worker container tag</display-name>
    <description>The repository and tag of the Kubernetes Image for the Worker to Run.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>worker_container_image_pull_policy</name>
    <value>IfNotPresent</value>
    <display-name>Worker container image pull policy</display-name>
  </property>
  <property>
    <name>delete_worker_pods</name>
    <value>True</value>
    <display-name>Delete worker pods</display-name>
    <description>If True (default), worker pods will be deleted upon termination.</description>
  </property>
  <property>
    <name>namespace</name>
    <value>default</value>
    <display-name>Namespace</display-name>
    <description>The Kubernetes namespace where airflow workers should be created. Defaults to `default`.</description>
  </property>
  <property>
    <name>airflow_configmap</name>
    <value></value>
    <display-name>Airflow config map</display-name>
    <description>The name of the Kubernetes ConfigMap Containing the Airflow Configuration (this file).</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>airflow_local_settings_configmap</name>
    <value></value>
    <display-name>Airflow local settings config map</display-name>
    <description>The name of the Kubernetes ConfigMap containing ``airflow_local_settings.py`` file.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>dags_in_image</name>
    <value>False</value>
    <display-name>Dags in image</display-name>
    <description>For docker image already contains DAGs, this is set to `True`, and the worker will search for dags in dags_folder, otherwise use git sync or dags volume claim to mount DAGs.</description>
  </property>
  <property>
    <name>dags_volume_subpath</name>
    <value></value>
    <display-name>DAGs volume subpath</display-name>
    <description>For either git sync or volume mounted DAGs, the worker will look in this subpath for DAGs.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>dags_volume_claim</name>
    <value></value>
    <display-name>DAGs volume claim</display-name>
    <description>For DAGs mounted via a volume claim (mutually exclusive with volume claim).</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>logs_volume_subpath</name>
    <value></value>
    <display-name>Logs volume subpath</display-name>
    <description>For volume mounted logs, the worker will look in this subpath for logs.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>logs_volume_claim</name>
    <value></value>
    <display-name>Logs volume claim</display-name>
    <description>A shared volume claim for the logs.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
      <name>dags_volume_host</name>
      <value></value>
      <display-name>Dags volume host</display-name>
      <description>For DAGs mounted via a hostPath volume (mutually exclusive with volume claim and git-sync). Useful in local environment, discouraged in production.</description>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
  <property>
      <name>logs_volume_host</name>
      <value></value>
      <display-name>Logs volume host</display-name>
      <display-name>A hostPath volume for the logs. Useful in local environment, discouraged in production.</display-name>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
  <property>
      <name>env_from_secret_ref</name>
      <value></value>
      <display-name>Env from secret ref</display-name>
      <display-name>A list of secretRefs to envFrom. If more than one secret is specified, provide a comma separated list: secret_a,secret_b</display-name>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
  <property>
    <name>git_repo</name>
    <value></value>
    <display-name>Git repo</display-name>
    <description>Git credentials and repository for DAGs mounted via Git (mutually exclusive with volume claim).</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>git_branch</name>
    <value></value>
    <display-name>Git branch</display-name>
    <description>Git credentials and repository for DAGs mounted via Git (mutually exclusive with volume claim).</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>git_subpath</name>
    <value></value>
    <display-name>Git subpath</display-name>
    <description>Git credentials and repository for DAGs mounted via Git (mutually exclusive with volume claim).</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>git_sync_rev</name>
    <value></value>
    <display-name>Git sync rev</display-name>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>git_user</name>
    <value></value>
    <display-name>Git user</display-name>
    <description>Git credentials and repository for DAGs mounted via Git (mutually exclusive with volume claim).</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>git_password</name>
    <value></value>
    <display-name>Git password</display-name>
    <description>Git credentials and repository for DAGs mounted via Git (mutually exclusive with volume claim).</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
      <name>git_sync_root</name>
      <value>/git</value>
      <display-name>Git sync root</display-name>
  </property>
  <property>
      <name>git_sync_dest</name>
      <value>repo</value>
      <display-name>Git sync dest</display-name>
  </property>
  <property>
      <name>git_dags_folder_mount_point</name>
      <value></value>
      <display-name>Git dags folder mount point</display-name>
      <description>Mount point of the volume if git-sync is being used. i.e. /usr/local/airflow/dags</description>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
  <property>
      <name>git_ssh_key_secret_name</name>
      <value></value>
      <display-name>Git ssh key secret name</display-name>
      <description></description>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
  <property>
      <name>git_ssh_known_hosts_configmap_name</name>
      <value></value>
      <display-name>Git ssh known hosts configmap name</display-name>
      <description></description>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
  <property>
      <name>git_sync_credentials_secret</name>
      <value></value>
      <display-name>Git sync credentials secret</display-name>
      <description></description>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
  <property>
    <name>git_sync_container_repository</name>
    <value>gcr.io/google-containers/git-sync-amd64</value>
    <display-name>Git sync container repository</display-name>
    <description>For cloning DAGs from git repositories into volumes: https://github.com/kubernetes/git-sync</description>
  </property>
  <property>
    <name>git_sync_container_tag</name>
    <value>v3.1.1</value>
    <display-name>Git sync container tag</display-name>
    <description>For cloning DAGs from git repositories into volumes: https://github.com/kubernetes/git-sync</description>
  </property>
  <property>
    <name>git_sync_init_container_name</name>
    <value>git-sync-clone</value>
    <display-name>Git sync init container name</display-name>
    <description>For cloning DAGs from git repositories into volumes: https://github.com/kubernetes/git-sync</description>
  </property>
  <property>
    <name>git_sync_run_as_user</name>
    <value>65533</value>
    <display-name>Git sync run as user</display-name>
    <description>For cloning DAGs from git repositories into volumes: https://github.com/kubernetes/git-sync</description>
  </property>
  <property>
    <name>worker_service_account_name</name>
    <value></value>
    <display-name>Worker service account name</display-name>
    <description>The name of the Kubernetes service account to be associated with airflow workers, if any. Service accounts are required for workers that require access to secrets or cluster resources. See the Kubernetes RBAC documentation for more: https://kubernetes.io/docs/admin/authorization/rbac/</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>image_pull_secrets</name>
    <value></value>
    <display-name>Image pull secrets</display-name>
    <description>Any image pull secrets to be given to worker pods, If more than one secret is required, provide a comma separated list: secret_a,secret_b</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>gcp_service_account_keys</name>
    <value></value>
    <display-name>GCP service_account keys</display-name>
    <description>GCP Service Account Keys to be provided to tasks run on Kubernetes Executors. Should be supplied in the format: key-name-1:key-path-1,key-name-2:key-path-2</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>in_cluster</name>
    <value>True</value>
    <display-name>In cluster</display-name>
    <description>Use the service account kubernetes gives to pods to connect to kubernetes cluster. It's intended for clients that expect to be running inside a pod running on kubernetes. It will raise an exception if called from a process not running in a kubernetes environment.</description>
  </property>
  <property>
      <name>affinity</name>
      <value></value>
      <display-name>Affinity</display-name>
      <description>Affinity configuration as a single line formatted JSON object. See the affinity model for top-level key names (e.g. `nodeAffinity`, etc.):  https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#affinity-v1-core</description>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
  <property>
      <name>tolerations</name>
      <value></value>
      <display-name>Tolerations</display-name>
      <description>A list of toleration objects as a single line formatted JSON array. https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#toleration-v1-core</description>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
  <property>
      <name>kube_client_request_args</name>
      <value>{"_request_timeout" : [60,60] }</value>
      <display-name>Kube client request args</display-name>
      <description>Keyword parameters to pass while calling a kubernetes client core_v1_api methods from Kubernetes Executor provided as a single line formatted JSON dictionary string. List of supported params are similar for all core_v1_apis, hence a single config variable for all apis. See: https://raw.githubusercontent.com/kubernetes-client/python/master/kubernetes/client/apis/core_v1_api.py Note that if no _request_timeout is specified, the kubernetes client will wait indefinitely for kubernetes api responses, which will cause the scheduler to hang. The timeout is specified as [connect timeout, read timeout]</description>
  </property>
  <property>
      <name>run_as_user</name>
      <value></value>
      <display-name>Run as user</display-name>
      <description>Specifies the uid to run the first process of the worker pods containers as</description>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
  <property>
      <name>fs_group</name>
      <value></value>
      <display-name>FS group</display-name>
      <description>Specifies a gid to associate with all containers in the worker pods if using a git_ssh_key_secret_name use an fs_group that allows for the key to be read, e.g. 65533</description>
      <value-attributes>
          <empty-value-valid>true</empty-value-valid>
      </value-attributes>
  </property>
</configuration>
