<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration supports_final="true">
<!-- This section only applies if you are using the CeleryExecutor in the core section above -->
  <property>
    <name>celery_app_name</name>
    <value>airflow.executors.celery_executor</value>
    <display-name>Celery app name</display-name>
    <description>The app name that will be used by celery.</description>
  </property>
  <property>
    <name>worker_concurrency</name>
    <value>16</value>
    <display-name>Worker concurrency</display-name>
    <description>The concurrency that will be used when starting workers with the "airflow worker" command. This defines the number of task instances that a worker will take, so size up your workers based on the resources on your worker box and the nature of your tasks.</description>
  </property>
  <property>
    <name>worker_autoscale</name>
    <value>16,12</value>
    <display-name>Worker Auto Scale</display-name>
    <description>  The maximum and minimum concurrency that will be used when starting workers with the `airflow celery worker` command (always keep minimum processes, but grow to maximum if necessary). Note the value should be max_concurrency,min_concurrency Pick these numbers based on resources on worker box and the nature of the task. If autoscale option is available, worker_concurrency will be ignored. http://docs.celeryproject.org/en/latest/reference/celery.bin.worker.html#cmdoption-celery-worker-autoscale Example: worker_autoscale = 16,12</description>
  </property>
  <property>
    <name>worker_log_server_port</name>
    <value>8793</value>
    <display-name>Worker log server port</display-name>
    <description>When you start an airflow worker, airflow starts a tiny web server subprocess to serve the workers local log files to the airflow main web server, who then builds pages and sends them to users. This defines the port on which the logs are served. It needs to be unused, and open visible from the main web server to connect into the workers.</description>
  </property>
  <property>
    <name>broker_url</name>
    <value>db+mysql://airflow:airflow@localhost:3306/airflow</value>
    <display-name>Broker URL</display-name>
    <description>The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally a sqlalchemy database. Refer to the Celery documentation for more information. http://docs.celeryproject.org/en/latest/userguide/configuration.html#broker-settings</description>
  </property>
  <property>
    <name>result_backend</name>
    <value>db+mysql://airflow:airflow@localhost:3306/airflow</value>
    <display-name>Result backend</display-name>
    <description>The Celery result_backend. When a job finishes, it needs to update the metadata of the job. Therefore it will post a message on a message bus, or insert it into a database (depending of the backend). This status is used by the scheduler to update the state of the task. The use of a database is highly recommended. http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-result-backend-settings</description>
  </property>
  <property>
    <name>flower_host</name>
    <value>0.0.0.0</value>
    <display-name>Flower host</display-name>
    <description>Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start it `airflow flower`. This defines the IP that Celery Flower runs on.</description>
  </property>
  <property>
    <name>flower_url_prefix</name>
    <value></value>
    <display-name>Flower URL prefix</display-name>
    <description>The root URL for Flower. Ex: flower_url_prefix = /flower.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>flower_port</name>
    <value>5555</value>
    <display-name>Flower port</display-name>
    <description>This defines the port that Celery Flower runs on.</description>
  </property>
  <property>
    <name>flower_basic_auth</name>
    <value></value>
    <display-name>Flower Basic Auth</display-name>
    <description>Securing Flower with Basic Authentication. Accepts user:password pairs separated by a comma. Example: flower_basic_auth = user1:password1,user2:password2</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>default_queue</name>
    <value>tasks</value>
    <display-name>Default queue</display-name>
    <description>Default queue that tasks get assigned to and that worker listen on.</description>
  </property>
  <property>
    <name>sync_parallelism</name>
    <value>0</value>
    <display-name>Sync Parallelism</display-name>
    <description>How many processes CeleryExecutor uses to sync task state. 0 means to use max(1, number of cores - 1) processes.</description>
  </property>
  <property>
    <name>celery_config_options</name>
    <value>airflow.config_templates.default_celery.DEFAULT_CELERY_CONFIG</value>
    <display-name>Celery config options</display-name>
    <description>Import path for celery configuration options.</description>
  </property>
  <property>
    <name>ssl_active</name>
    <value>False</value>
    <display-name>SSL active</display-name>
    <description>In case of using SSL.</description>
  </property>
  <property>
    <name>ssl_key</name>
    <value></value>
    <display-name>SSL key</display-name>
    <description></description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>ssl_cert</name>
    <value></value>
    <display-name>SSL cert</display-name>
    <description></description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>ssl_cacert</name>
    <value></value>
    <display-name>SSL cacert</display-name>
    <description></description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>pool</name>
    <value>prefork</value>
    <display-name>Pool</display-name>
    <description>Celery Pool implementation. Choices include: prefork (default), eventlet, gevent or solo. https://docs.celeryproject.org/en/latest/userguide/workers.html#concurrency https://docs.celeryproject.org/en/latest/userguide/concurrency/eventlet.html</description>
  </property>
  <property>
    <name>operation_timeout</name>
    <value>2</value>
    <display-name>Operation Timeout</display-name>
    <description>The number of seconds to wait before timing out ``send_task_to_executor`` or ``fetch_celery_task_state`` operations.</description>
  </property>
</configuration>
